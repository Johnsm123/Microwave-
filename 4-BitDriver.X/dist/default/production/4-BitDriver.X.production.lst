

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Feb 10 17:55:10 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     0008                     PORTD           equ	8	;# 
    68     0009                     PORTE           equ	9	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     0088                     TRISD           equ	136	;# 
    99     0089                     TRISE           equ	137	;# 
   100     008C                     PIE1            equ	140	;# 
   101     008D                     PIE2            equ	141	;# 
   102     008E                     PCON            equ	142	;# 
   103     0091                     SSPCON2         equ	145	;# 
   104     0092                     PR2             equ	146	;# 
   105     0093                     SSPADD          equ	147	;# 
   106     0094                     SSPSTAT         equ	148	;# 
   107     0098                     TXSTA           equ	152	;# 
   108     0099                     SPBRG           equ	153	;# 
   109     009C                     CMCON           equ	156	;# 
   110     009D                     CVRCON          equ	157	;# 
   111     009E                     ADRESL          equ	158	;# 
   112     009F                     ADCON1          equ	159	;# 
   113     010C                     EEDATA          equ	268	;# 
   114     010D                     EEADR           equ	269	;# 
   115     010E                     EEDATH          equ	270	;# 
   116     010F                     EEADRH          equ	271	;# 
   117     018C                     EECON1          equ	396	;# 
   118     018D                     EECON2          equ	397	;# 
   119     0000                     INDF            equ	0	;# 
   120     0001                     TMR0            equ	1	;# 
   121     0002                     PCL             equ	2	;# 
   122     0003                     STATUS          equ	3	;# 
   123     0004                     FSR             equ	4	;# 
   124     0005                     PORTA           equ	5	;# 
   125     0006                     PORTB           equ	6	;# 
   126     0007                     PORTC           equ	7	;# 
   127     0008                     PORTD           equ	8	;# 
   128     0009                     PORTE           equ	9	;# 
   129     000A                     PCLATH          equ	10	;# 
   130     000B                     INTCON          equ	11	;# 
   131     000C                     PIR1            equ	12	;# 
   132     000D                     PIR2            equ	13	;# 
   133     000E                     TMR1            equ	14	;# 
   134     000E                     TMR1L           equ	14	;# 
   135     000F                     TMR1H           equ	15	;# 
   136     0010                     T1CON           equ	16	;# 
   137     0011                     TMR2            equ	17	;# 
   138     0012                     T2CON           equ	18	;# 
   139     0013                     SSPBUF          equ	19	;# 
   140     0014                     SSPCON          equ	20	;# 
   141     0015                     CCPR1           equ	21	;# 
   142     0015                     CCPR1L          equ	21	;# 
   143     0016                     CCPR1H          equ	22	;# 
   144     0017                     CCP1CON         equ	23	;# 
   145     0018                     RCSTA           equ	24	;# 
   146     0019                     TXREG           equ	25	;# 
   147     001A                     RCREG           equ	26	;# 
   148     001B                     CCPR2           equ	27	;# 
   149     001B                     CCPR2L          equ	27	;# 
   150     001C                     CCPR2H          equ	28	;# 
   151     001D                     CCP2CON         equ	29	;# 
   152     001E                     ADRESH          equ	30	;# 
   153     001F                     ADCON0          equ	31	;# 
   154     0081                     OPTION_REG      equ	129	;# 
   155     0085                     TRISA           equ	133	;# 
   156     0086                     TRISB           equ	134	;# 
   157     0087                     TRISC           equ	135	;# 
   158     0088                     TRISD           equ	136	;# 
   159     0089                     TRISE           equ	137	;# 
   160     008C                     PIE1            equ	140	;# 
   161     008D                     PIE2            equ	141	;# 
   162     008E                     PCON            equ	142	;# 
   163     0091                     SSPCON2         equ	145	;# 
   164     0092                     PR2             equ	146	;# 
   165     0093                     SSPADD          equ	147	;# 
   166     0094                     SSPSTAT         equ	148	;# 
   167     0098                     TXSTA           equ	152	;# 
   168     0099                     SPBRG           equ	153	;# 
   169     009C                     CMCON           equ	156	;# 
   170     009D                     CVRCON          equ	157	;# 
   171     009E                     ADRESL          equ	158	;# 
   172     009F                     ADCON1          equ	159	;# 
   173     010C                     EEDATA          equ	268	;# 
   174     010D                     EEADR           equ	269	;# 
   175     010E                     EEDATH          equ	270	;# 
   176     010F                     EEADRH          equ	271	;# 
   177     018C                     EECON1          equ	396	;# 
   178     018D                     EECON2          equ	397	;# 
   179     0000                     INDF            equ	0	;# 
   180     0001                     TMR0            equ	1	;# 
   181     0002                     PCL             equ	2	;# 
   182     0003                     STATUS          equ	3	;# 
   183     0004                     FSR             equ	4	;# 
   184     0005                     PORTA           equ	5	;# 
   185     0006                     PORTB           equ	6	;# 
   186     0007                     PORTC           equ	7	;# 
   187     0008                     PORTD           equ	8	;# 
   188     0009                     PORTE           equ	9	;# 
   189     000A                     PCLATH          equ	10	;# 
   190     000B                     INTCON          equ	11	;# 
   191     000C                     PIR1            equ	12	;# 
   192     000D                     PIR2            equ	13	;# 
   193     000E                     TMR1            equ	14	;# 
   194     000E                     TMR1L           equ	14	;# 
   195     000F                     TMR1H           equ	15	;# 
   196     0010                     T1CON           equ	16	;# 
   197     0011                     TMR2            equ	17	;# 
   198     0012                     T2CON           equ	18	;# 
   199     0013                     SSPBUF          equ	19	;# 
   200     0014                     SSPCON          equ	20	;# 
   201     0015                     CCPR1           equ	21	;# 
   202     0015                     CCPR1L          equ	21	;# 
   203     0016                     CCPR1H          equ	22	;# 
   204     0017                     CCP1CON         equ	23	;# 
   205     0018                     RCSTA           equ	24	;# 
   206     0019                     TXREG           equ	25	;# 
   207     001A                     RCREG           equ	26	;# 
   208     001B                     CCPR2           equ	27	;# 
   209     001B                     CCPR2L          equ	27	;# 
   210     001C                     CCPR2H          equ	28	;# 
   211     001D                     CCP2CON         equ	29	;# 
   212     001E                     ADRESH          equ	30	;# 
   213     001F                     ADCON0          equ	31	;# 
   214     0081                     OPTION_REG      equ	129	;# 
   215     0085                     TRISA           equ	133	;# 
   216     0086                     TRISB           equ	134	;# 
   217     0087                     TRISC           equ	135	;# 
   218     0088                     TRISD           equ	136	;# 
   219     0089                     TRISE           equ	137	;# 
   220     008C                     PIE1            equ	140	;# 
   221     008D                     PIE2            equ	141	;# 
   222     008E                     PCON            equ	142	;# 
   223     0091                     SSPCON2         equ	145	;# 
   224     0092                     PR2             equ	146	;# 
   225     0093                     SSPADD          equ	147	;# 
   226     0094                     SSPSTAT         equ	148	;# 
   227     0098                     TXSTA           equ	152	;# 
   228     0099                     SPBRG           equ	153	;# 
   229     009C                     CMCON           equ	156	;# 
   230     009D                     CVRCON          equ	157	;# 
   231     009E                     ADRESL          equ	158	;# 
   232     009F                     ADCON1          equ	159	;# 
   233     010C                     EEDATA          equ	268	;# 
   234     010D                     EEADR           equ	269	;# 
   235     010E                     EEDATH          equ	270	;# 
   236     010F                     EEADRH          equ	271	;# 
   237     018C                     EECON1          equ	396	;# 
   238     018D                     EECON2          equ	397	;# 
   239     0008                     _PORTD          set	8
   240     0009                     _PORTEbits      set	9
   241     0089                     _TRISEbits      set	137
   242     0088                     _TRISD          set	136
   243                           
   244                           	psect	strings
   245     0003                     __pstrings:
   246     0003                     stringtab:
   247     0003                     __stringtab:
   248     0003                     stringcode:	
   249                           ;	String table - string pointers are 1 byte each
   250                           
   251     0003                     stringdir:
   252     0003  3000               	movlw	high stringdir
   253     0004  008A               	movwf	10
   254     0005  0804               	movf	4,w
   255     0006  0A84               	incf	4,f
   256     0007  0782               	addwf	2,f
   257     0008                     __stringbase:
   258     0008  3400               	retlw	0
   259     0009                     __end_of__stringtab:
   260     0009                     STR_3:
   261     0009  3468               	retlw	104	;'h'
   262     000A  346F               	retlw	111	;'o'
   263     000B  3477               	retlw	119	;'w'
   264     000C  3420               	retlw	32	;' '
   265     000D  3472               	retlw	114	;'r'
   266     000E  3420               	retlw	32	;' '
   267     000F  3475               	retlw	117	;'u'
   268     0010  3420               	retlw	32	;' '
   269     0011  3400               	retlw	0
   270     0012                     STR_1:
   271     0012  3468               	retlw	104	;'h'
   272     0013  3465               	retlw	101	;'e'
   273     0014  346C               	retlw	108	;'l'
   274     0015  346C               	retlw	108	;'l'
   275     0016  346F               	retlw	111	;'o'
   276     0017  3400               	retlw	0
   277     0018                     STR_2:
   278     0018  3468               	retlw	104	;'h'
   279     0019  3469               	retlw	105	;'i'
   280     001A  3400               	retlw	0
   281                           
   282                           	psect	cinit
   283     07FC                     start_initialization:	
   284                           ; #config settings
   285                           
   286     07FC                     __initialization:
   287     07FC                     end_of_initialization:	
   288                           ;End of C runtime variable initialization code
   289                           
   290     07FC                     __end_of__initialization:
   291     07FC  0183               	clrf	3
   292     07FD  120A  118A  2F3A   	ljmp	_main	;jump to C main() function
   293                           
   294                           	psect	cstackCOMMON
   295     0070                     __pcstackCOMMON:
   296     0070                     ?_clcd_write:
   297     0070                     ?_init_display_controller:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     0070                     ?_init_clcd:	
   301                           ; 1 bytes @ 0x0
   302                           
   303     0070                     ?_init_config:	
   304                           ; 1 bytes @ 0x0
   305                           
   306     0070                     ?_main:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0070                     clcd_write@mode:	
   310                           ; 1 bytes @ 0x0
   311                           
   312                           
   313                           ; 1 bytes @ 0x0
   314     0070                     	ds	1
   315     0071                     ??_clcd_write:
   316                           
   317                           ; 1 bytes @ 0x1
   318     0071                     	ds	2
   319     0073                     clcd_write@byte:
   320                           
   321                           ; 1 bytes @ 0x3
   322     0073                     	ds	1
   323     0074                     ?_clcd_putch:
   324     0074                     ?_clcd_print:	
   325                           ; 1 bytes @ 0x4
   326                           
   327     0074                     clcd_putch@addr:	
   328                           ; 1 bytes @ 0x4
   329                           
   330     0074                     clcd_print@str:	
   331                           ; 1 bytes @ 0x4
   332                           
   333     0074                     ??_init_display_controller:	
   334                           ; 1 bytes @ 0x4
   335                           
   336                           
   337                           ; 1 bytes @ 0x4
   338     0074                     	ds	1
   339     0075                     clcd_putch@data:
   340     0075                     clcd_print@addr:	
   341                           ; 1 bytes @ 0x5
   342                           
   343     0075                     ??_clcd_putch:	
   344                           ; 1 bytes @ 0x5
   345                           
   346                           
   347                           ; 1 bytes @ 0x5
   348     0075                     	ds	1
   349     0076                     ??_init_clcd:
   350     0076                     ??_clcd_print:	
   351                           ; 1 bytes @ 0x6
   352                           
   353     0076                     ??_init_config:	
   354                           ; 1 bytes @ 0x6
   355                           
   356     0076                     ??_main:	
   357                           ; 1 bytes @ 0x6
   358                           
   359                           
   360                           	psect	maintext
   361     073A                     __pmaintext:	
   362                           ; 1 bytes @ 0x6
   363 ;;
   364 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   365 ;;
   366 ;; *************** function _main *****************
   367 ;; Defined at:
   368 ;;		line 15 in file "main.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;		None
   371 ;; Auto vars:     Size  Location     Type
   372 ;;		None
   373 ;; Return value:  Size  Location     Type
   374 ;;                  1    wreg      void 
   375 ;; Registers used:
   376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : B00/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   382 ;;      Params:         0       0       0       0       0
   383 ;;      Locals:         0       0       0       0       0
   384 ;;      Temps:          0       0       0       0       0
   385 ;;      Totals:         0       0       0       0       0
   386 ;;Total ram usage:        0 bytes
   387 ;; Hardware stack levels required when called: 4
   388 ;; This function calls:
   389 ;;		_clcd_print
   390 ;;		_clcd_putch
   391 ;;		_init_config
   392 ;; This function is called by:
   393 ;;		Startup code after reset
   394 ;; This function uses a non-reentrant model
   395 ;;
   396                           
   397     073A                     _main:	
   398                           ;psect for function _main
   399                           
   400     073A                     l721:	
   401                           ;incstack = 0
   402                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   403                           
   404     073A  120A  118A  26F1  120A  118A  	fcall	_init_config
   405     073F                     l42:
   406     073F  3085               	movlw	133
   407     0740  00F4               	movwf	clcd_putch@addr
   408     0741  3041               	movlw	65
   409     0742  120A  118A  2704  120A  118A  	fcall	_clcd_putch
   410     0747                     l723:
   411     0747  300A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   412     0748  00F4               	movwf	clcd_print@str
   413     0749  30C0               	movlw	192
   414     074A  00F5               	movwf	clcd_print@addr
   415     074B  120A  118A  2715  120A  118A  	fcall	_clcd_print
   416     0750                     l725:
   417     0750  3010               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   418     0751  00F4               	movwf	clcd_print@str
   419     0752  3090               	movlw	144
   420     0753  00F5               	movwf	clcd_print@addr
   421     0754  120A  118A  2715  120A  118A  	fcall	_clcd_print
   422     0759                     l727:
   423     0759  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   424     075A  00F4               	movwf	clcd_print@str
   425     075B  30D0               	movlw	208
   426     075C  00F5               	movwf	clcd_print@addr
   427     075D  120A  118A  2715  120A  118A  	fcall	_clcd_print
   428     0762  2F3F               	goto	l42
   429     0763  120A  118A  2800   	ljmp	start
   430     0766                     __end_of_main:
   431                           
   432                           	psect	text1
   433     06F1                     __ptext1:	
   434 ;; *************** function _init_config *****************
   435 ;; Defined at:
   436 ;;		line 10 in file "main.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, status,2, status,0, pclath, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   450 ;;      Params:         0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0
   453 ;;      Totals:         0       0       0       0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels used: 1
   456 ;; Hardware stack levels required when called: 3
   457 ;; This function calls:
   458 ;;		_init_clcd
   459 ;; This function is called by:
   460 ;;		_main
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464     06F1                     _init_config:	
   465                           ;psect for function _init_config
   466                           
   467     06F1                     l719:	
   468                           ;incstack = 0
   469                           ; Regs used in _init_config: [wreg+status,2+status,0+pclath+cstack]
   470                           
   471                           
   472                           ;main.c: 12:         clcd_print("hello", (0xC0 + (0)));
   473     06F1  120A  118A  26F7  120A  118A  	fcall	_init_clcd
   474     06F6                     l37:
   475     06F6  0008               	return
   476     06F7                     __end_of_init_config:
   477                           
   478                           	psect	text2
   479     06F7                     __ptext2:	
   480 ;; *************** function _init_clcd *****************
   481 ;; Defined at:
   482 ;;		line 44 in file "clcd.c"
   483 ;; Parameters:    Size  Location     Type
   484 ;;		None
   485 ;; Auto vars:     Size  Location     Type
   486 ;;		None
   487 ;; Return value:  Size  Location     Type
   488 ;;                  1    wreg      void 
   489 ;; Registers used:
   490 ;;		wreg, status,2, status,0, pclath, cstack
   491 ;; Tracked objects:
   492 ;;		On entry : 0/0
   493 ;;		On exit  : 0/0
   494 ;;		Unchanged: 0/0
   495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   496 ;;      Params:         0       0       0       0       0
   497 ;;      Locals:         0       0       0       0       0
   498 ;;      Temps:          0       0       0       0       0
   499 ;;      Totals:         0       0       0       0       0
   500 ;;Total ram usage:        0 bytes
   501 ;; Hardware stack levels used: 1
   502 ;; Hardware stack levels required when called: 2
   503 ;; This function calls:
   504 ;;		_init_display_controller
   505 ;; This function is called by:
   506 ;;		_init_config
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510     06F7                     _init_clcd:	
   511                           ;psect for function _init_clcd
   512                           
   513     06F7                     l701:	
   514                           ;incstack = 0
   515                           ; Regs used in _init_clcd: [wreg+status,2+status,0+pclath+cstack]
   516                           
   517                           
   518                           ;clcd.c: 47:     TRISD = TRISD & 0x0F;
   519     06F7  1683               	bsf	3,5	;RP0=1, select bank1
   520     06F8  1303               	bcf	3,6	;RP1=0, select bank1
   521     06F9  0808               	movf	8,w	;volatile
   522     06FA  390F               	andlw	15
   523     06FB  0088               	movwf	8	;volatile
   524     06FC                     l703:
   525                           
   526                           ;clcd.c: 50:     TRISEbits.TRISE2 = 0;
   527     06FC  1109               	bcf	9,2	;volatile
   528     06FD                     l705:
   529                           
   530                           ;clcd.c: 51:     TRISEbits.TRISE1 = 0;
   531     06FD  1089               	bcf	9,1	;volatile
   532     06FE                     l707:
   533                           
   534                           ;clcd.c: 53:     init_display_controller();
   535     06FE  120A  118A  2799  120A  118A  	fcall	_init_display_controller
   536     0703                     l19:
   537     0703  0008               	return
   538     0704                     __end_of_init_clcd:
   539                           
   540                           	psect	text3
   541     0799                     __ptext3:	
   542 ;; *************** function _init_display_controller *****************
   543 ;; Defined at:
   544 ;;		line 21 in file "clcd.c"
   545 ;; Parameters:    Size  Location     Type
   546 ;;		None
   547 ;; Auto vars:     Size  Location     Type
   548 ;;		None
   549 ;; Return value:  Size  Location     Type
   550 ;;                  1    wreg      void 
   551 ;; Registers used:
   552 ;;		wreg, status,2, status,0, pclath, cstack
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   558 ;;      Params:         0       0       0       0       0
   559 ;;      Locals:         0       0       0       0       0
   560 ;;      Temps:          2       0       0       0       0
   561 ;;      Totals:         2       0       0       0       0
   562 ;;Total ram usage:        2 bytes
   563 ;; Hardware stack levels used: 1
   564 ;; Hardware stack levels required when called: 1
   565 ;; This function calls:
   566 ;;		_clcd_write
   567 ;; This function is called by:
   568 ;;		_init_clcd
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572     0799                     _init_display_controller:	
   573                           ;psect for function _init_display_controller
   574                           
   575     0799                     l677:	
   576                           ;incstack = 0
   577                           ; Regs used in _init_display_controller: [wreg+status,2+status,0+pclath+cstack]
   578                           
   579                           
   580                           ;clcd.c: 24:     _delay((unsigned long)((30)*(20000000/4000.0)));
   581     0799  30C3               	movlw	195
   582     079A  00F5               	movwf	??_init_display_controller+1
   583     079B  30CD               	movlw	205
   584     079C  00F4               	movwf	??_init_display_controller
   585     079D                     u57:
   586     079D  0BF4               	decfsz	??_init_display_controller,f
   587     079E  2F9D               	goto	u57
   588     079F  0BF5               	decfsz	??_init_display_controller+1,f
   589     07A0  2F9D               	goto	u57
   590     07A1                     l679:
   591                           
   592                           ;clcd.c: 27:     clcd_write(0x33, 0);
   593     07A1  01F0               	clrf	clcd_write@mode
   594     07A2  3033               	movlw	51
   595     07A3  120A  118A  2766  120A  118A  	fcall	_clcd_write
   596     07A8                     l681:
   597                           
   598                           ;clcd.c: 28:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
   599     07A8  301B               	movlw	27
   600     07A9  00F5               	movwf	??_init_display_controller+1
   601     07AA  309E               	movlw	158
   602     07AB  00F4               	movwf	??_init_display_controller
   603     07AC                     u67:
   604     07AC  0BF4               	decfsz	??_init_display_controller,f
   605     07AD  2FAC               	goto	u67
   606     07AE  0BF5               	decfsz	??_init_display_controller+1,f
   607     07AF  2FAC               	goto	u67
   608     07B0  0000               	nop
   609                           
   610                           ;clcd.c: 29:     clcd_write(0x33, 0);
   611     07B1  01F0               	clrf	clcd_write@mode
   612     07B2  3033               	movlw	51
   613     07B3  120A  118A  2766  120A  118A  	fcall	_clcd_write
   614     07B8                     l683:
   615                           
   616                           ;clcd.c: 30:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   617     07B8  30A6               	movlw	166
   618     07B9  00F4               	movwf	??_init_display_controller
   619     07BA                     u77:
   620     07BA  0BF4               	decfsz	??_init_display_controller,f
   621     07BB  2FBA               	goto	u77
   622     07BC  0000               	nop
   623     07BD                     l685:
   624                           
   625                           ;clcd.c: 31:     clcd_write(0x33, 0);
   626     07BD  01F0               	clrf	clcd_write@mode
   627     07BE  3033               	movlw	51
   628     07BF  120A  118A  2766  120A  118A  	fcall	_clcd_write
   629     07C4                     l687:
   630                           
   631                           ;clcd.c: 32:     _delay((unsigned long)((1)*(20000000/4000000.0)));
   632     07C4  2FC5               	nop2	;2 cycle nop
   633     07C5  2FC6               	nop2	;2 cycle nop
   634     07C6  0000               	nop
   635     07C7                     l689:
   636                           
   637                           ;clcd.c: 34:     clcd_write(0x02, 0);
   638     07C7  01F0               	clrf	clcd_write@mode
   639     07C8  3002               	movlw	2
   640     07C9  120A  118A  2766  120A  118A  	fcall	_clcd_write
   641     07CE                     l691:
   642                           
   643                           ;clcd.c: 35:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   644     07CE  30A6               	movlw	166
   645     07CF  00F4               	movwf	??_init_display_controller
   646     07D0                     u87:
   647     07D0  0BF4               	decfsz	??_init_display_controller,f
   648     07D1  2FD0               	goto	u87
   649     07D2  0000               	nop
   650                           
   651                           ;clcd.c: 36:     clcd_write(0x28, 0);
   652     07D3  01F0               	clrf	clcd_write@mode
   653     07D4  3028               	movlw	40
   654     07D5  120A  118A  2766  120A  118A  	fcall	_clcd_write
   655     07DA                     l693:
   656                           
   657                           ;clcd.c: 37:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   658     07DA  30A6               	movlw	166
   659     07DB  00F4               	movwf	??_init_display_controller
   660     07DC                     u97:
   661     07DC  0BF4               	decfsz	??_init_display_controller,f
   662     07DD  2FDC               	goto	u97
   663     07DE  0000               	nop
   664     07DF                     l695:
   665                           
   666                           ;clcd.c: 38:     clcd_write(0x01, 0);
   667     07DF  01F0               	clrf	clcd_write@mode
   668     07E0  3001               	movlw	1
   669     07E1  120A  118A  2766  120A  118A  	fcall	_clcd_write
   670                           
   671                           ;clcd.c: 39:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   672     07E6  3004               	movlw	4
   673     07E7  00F5               	movwf	??_init_display_controller+1
   674     07E8  303D               	movlw	61
   675     07E9  00F4               	movwf	??_init_display_controller
   676     07EA                     u107:
   677     07EA  0BF4               	decfsz	??_init_display_controller,f
   678     07EB  2FEA               	goto	u107
   679     07EC  0BF5               	decfsz	??_init_display_controller+1,f
   680     07ED  2FEA               	goto	u107
   681     07EE  2FEF               	nop2
   682     07EF                     l697:
   683                           
   684                           ;clcd.c: 40:     clcd_write(0x0C, 0);
   685     07EF  01F0               	clrf	clcd_write@mode
   686     07F0  300C               	movlw	12
   687     07F1  120A  118A  2766  120A  118A  	fcall	_clcd_write
   688     07F6                     l699:
   689                           
   690                           ;clcd.c: 41:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   691     07F6  30A6               	movlw	166
   692     07F7  00F4               	movwf	??_init_display_controller
   693     07F8                     u117:
   694     07F8  0BF4               	decfsz	??_init_display_controller,f
   695     07F9  2FF8               	goto	u117
   696     07FA  0000               	nop
   697     07FB                     l16:
   698     07FB  0008               	return
   699     07FC                     __end_of_init_display_controller:
   700                           
   701                           	psect	text4
   702     0704                     __ptext4:	
   703 ;; *************** function _clcd_putch *****************
   704 ;; Defined at:
   705 ;;		line 56 in file "clcd.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;  data            1    wreg     const unsigned char 
   708 ;;  addr            1    4[COMMON] unsigned char 
   709 ;; Auto vars:     Size  Location     Type
   710 ;;  data            1    5[COMMON] const unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2, status,0, pclath, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   720 ;;      Params:         1       0       0       0       0
   721 ;;      Locals:         1       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0
   723 ;;      Totals:         2       0       0       0       0
   724 ;;Total ram usage:        2 bytes
   725 ;; Hardware stack levels used: 1
   726 ;; Hardware stack levels required when called: 1
   727 ;; This function calls:
   728 ;;		_clcd_write
   729 ;; This function is called by:
   730 ;;		_main
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734     0704                     _clcd_putch:	
   735                           ;psect for function _clcd_putch
   736                           
   737                           
   738                           ;incstack = 0
   739                           ; Regs used in _clcd_putch: [wreg+status,2+status,0+pclath+cstack]
   740                           ;clcd_putch@data stored from wreg
   741     0704  00F5               	movwf	clcd_putch@data
   742     0705                     l709:
   743                           
   744                           ;clcd.c: 56: void clcd_putch(const char data, unsigned char addr);clcd.c: 57: {;clcd.c: 
      +                          58:     clcd_write(addr, 0);
   745     0705  01F0               	clrf	clcd_write@mode
   746     0706  0874               	movf	clcd_putch@addr,w
   747     0707  120A  118A  2766  120A  118A  	fcall	_clcd_write
   748                           
   749                           ;clcd.c: 59:     clcd_write(data, 1);
   750     070C  01F0               	clrf	clcd_write@mode
   751     070D  0AF0               	incf	clcd_write@mode,f
   752     070E  0875               	movf	clcd_putch@data,w
   753     070F  120A  118A  2766  120A  118A  	fcall	_clcd_write
   754     0714                     l22:
   755     0714  0008               	return
   756     0715                     __end_of_clcd_putch:
   757                           
   758                           	psect	text5
   759     0715                     __ptext5:	
   760 ;; *************** function _clcd_print *****************
   761 ;; Defined at:
   762 ;;		line 62 in file "clcd.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;  str             1    4[COMMON] PTR const unsigned char 
   765 ;;		 -> STR_3(9), STR_2(3), STR_1(6), 
   766 ;;  addr            1    5[COMMON] unsigned char 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   778 ;;      Params:         2       0       0       0       0
   779 ;;      Locals:         0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0
   781 ;;      Totals:         2       0       0       0       0
   782 ;;Total ram usage:        2 bytes
   783 ;; Hardware stack levels used: 1
   784 ;; Hardware stack levels required when called: 1
   785 ;; This function calls:
   786 ;;		_clcd_write
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792     0715                     _clcd_print:	
   793                           ;psect for function _clcd_print
   794                           
   795     0715                     l711:	
   796                           ;incstack = 0
   797                           ; Regs used in _clcd_print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   798                           
   799                           
   800                           ;clcd.c: 62: void clcd_print(const char *str, unsigned char addr);clcd.c: 63: {;clcd.c: 
      +                          64:     clcd_write(addr, 0);
   801     0715  01F0               	clrf	clcd_write@mode
   802     0716  0875               	movf	clcd_print@addr,w
   803     0717  120A  118A  2766  120A  118A  	fcall	_clcd_write
   804                           
   805                           ;clcd.c: 66:     while (*str != '\0')
   806     071C  2F2D               	goto	l717
   807     071D                     l713:
   808                           
   809                           ;clcd.c: 67:     {;clcd.c: 68:         clcd_write(*str, 1);
   810     071D  01F0               	clrf	clcd_write@mode
   811     071E  0AF0               	incf	clcd_write@mode,f
   812     071F  0874               	movf	clcd_print@str,w
   813     0720  0084               	movwf	4
   814     0721  120A  118A  2003  120A  118A  	fcall	stringdir
   815     0726  120A  118A  2766  120A  118A  	fcall	_clcd_write
   816     072B                     l715:
   817                           
   818                           ;clcd.c: 69:         str++;
   819     072B  3001               	movlw	1
   820     072C  07F4               	addwf	clcd_print@str,f
   821     072D                     l717:
   822                           
   823                           ;clcd.c: 66:     while (*str != '\0')
   824     072D  0874               	movf	clcd_print@str,w
   825     072E  0084               	movwf	4
   826     072F  120A  118A  2003  120A  118A  	fcall	stringdir
   827     0734  3A00               	xorlw	0
   828     0735  1D03               	skipz
   829     0736  2F38               	goto	u41
   830     0737  2F39               	goto	u40
   831     0738                     u41:
   832     0738  2F1D               	goto	l713
   833     0739                     u40:
   834     0739                     l28:
   835     0739  0008               	return
   836     073A                     __end_of_clcd_print:
   837                           
   838                           	psect	text6
   839     0766                     __ptext6:	
   840 ;; *************** function _clcd_write *****************
   841 ;; Defined at:
   842 ;;		line 4 in file "clcd.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  byte            1    wreg     unsigned char 
   845 ;;  mode            1    0[COMMON] unsigned char 
   846 ;; Auto vars:     Size  Location     Type
   847 ;;  byte            1    3[COMMON] unsigned char 
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      void 
   850 ;; Registers used:
   851 ;;		wreg, status,2, status,0
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   857 ;;      Params:         1       0       0       0       0
   858 ;;      Locals:         1       0       0       0       0
   859 ;;      Temps:          2       0       0       0       0
   860 ;;      Totals:         4       0       0       0       0
   861 ;;Total ram usage:        4 bytes
   862 ;; Hardware stack levels used: 1
   863 ;; This function calls:
   864 ;;		Nothing
   865 ;; This function is called by:
   866 ;;		_init_display_controller
   867 ;;		_clcd_putch
   868 ;;		_clcd_print
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872     0766                     _clcd_write:	
   873                           ;psect for function _clcd_write
   874                           
   875                           
   876                           ;incstack = 0
   877                           ; Regs used in _clcd_write: [wreg+status,2+status,0]
   878                           ;clcd_write@byte stored from wreg
   879     0766  00F3               	movwf	clcd_write@byte
   880     0767                     l659:
   881                           
   882                           ;clcd.c: 4: void clcd_write(unsigned char byte, unsigned char mode);clcd.c: 5: {;clcd.c:
      +                           6:     PORTEbits.RE2 = mode;
   883     0767  0C70               	rrf	clcd_write@mode,w
   884     0768  1283               	bcf	3,5	;RP0=0, select bank0
   885     0769  1303               	bcf	3,6	;RP1=0, select bank0
   886     076A  1C03               	skipc
   887     076B  1109               	bcf	9,2	;volatile
   888     076C  1803               	skipnc
   889     076D  1509               	bsf	9,2	;volatile
   890     076E                     l661:
   891                           
   892                           ;clcd.c: 8:     PORTD = byte & 0xF0;
   893     076E  0873               	movf	clcd_write@byte,w
   894     076F  39F0               	andlw	240
   895     0770  0088               	movwf	8	;volatile
   896     0771                     l663:
   897                           
   898                           ;clcd.c: 9:     PORTEbits.RE1 = 1;
   899     0771  1489               	bsf	9,1	;volatile
   900     0772                     l665:
   901                           
   902                           ;clcd.c: 10:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   903     0772  30A6               	movlw	166
   904     0773  00F1               	movwf	??_clcd_write
   905     0774                     u127:
   906     0774  0BF1               	decfsz	??_clcd_write,f
   907     0775  2F74               	goto	u127
   908     0776  0000               	nop
   909     0777                     l667:
   910                           
   911                           ;clcd.c: 11:     PORTEbits.RE1 = 0;
   912     0777  1283               	bcf	3,5	;RP0=0, select bank0
   913     0778  1303               	bcf	3,6	;RP1=0, select bank0
   914     0779  1089               	bcf	9,1	;volatile
   915                           
   916                           ;clcd.c: 13:     PORTD = (byte & 0x0F) << 4;
   917     077A  0873               	movf	clcd_write@byte,w
   918     077B  390F               	andlw	15
   919     077C  00F1               	movwf	??_clcd_write
   920     077D  3003               	movlw	3
   921     077E                     u35:
   922     077E  1003               	clrc
   923     077F  0DF1               	rlf	??_clcd_write,f
   924     0780  3EFF               	addlw	-1
   925     0781  1D03               	skipz
   926     0782  2F7E               	goto	u35
   927     0783  1003               	clrc
   928     0784  0D71               	rlf	??_clcd_write,w
   929     0785  0088               	movwf	8	;volatile
   930     0786                     l669:
   931                           
   932                           ;clcd.c: 14:     PORTEbits.RE1 = 1;
   933     0786  1489               	bsf	9,1	;volatile
   934     0787                     l671:
   935                           
   936                           ;clcd.c: 15:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   937     0787  30A6               	movlw	166
   938     0788  00F1               	movwf	??_clcd_write
   939     0789                     u137:
   940     0789  0BF1               	decfsz	??_clcd_write,f
   941     078A  2F89               	goto	u137
   942     078B  0000               	nop
   943     078C                     l673:
   944                           
   945                           ;clcd.c: 16:     PORTEbits.RE1 = 0;
   946     078C  1283               	bcf	3,5	;RP0=0, select bank0
   947     078D  1303               	bcf	3,6	;RP1=0, select bank0
   948     078E  1089               	bcf	9,1	;volatile
   949     078F                     l675:
   950                           
   951                           ;clcd.c: 18:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
   952     078F  301B               	movlw	27
   953     0790  00F2               	movwf	??_clcd_write+1
   954     0791  309E               	movlw	158
   955     0792  00F1               	movwf	??_clcd_write
   956     0793                     u147:
   957     0793  0BF1               	decfsz	??_clcd_write,f
   958     0794  2F93               	goto	u147
   959     0795  0BF2               	decfsz	??_clcd_write+1,f
   960     0796  2F93               	goto	u147
   961     0797  0000               	nop
   962     0798                     l13:
   963     0798  0008               	return
   964     0799                     __end_of_clcd_write:
   965     0002                     ___latbits      equ	2
   966     007E                     btemp           set	126	;btemp
   967     007E                     wtemp0          set	126
   968                           
   969                           	psect	config
   970                           
   971                           ;Config register CONFIG @ 0x2007
   972                           ;	Oscillator Selection bits
   973                           ;	FOSC = 0x3, unprogrammed default
   974                           ;	Watchdog Timer Enable bit
   975                           ;	WDTE = OFF, WDT disabled
   976                           ;	Power-up Timer Enable bit
   977                           ;	PWRTE = 0x1, unprogrammed default
   978                           ;	Brown-out Reset Enable bit
   979                           ;	BOREN = 0x1, unprogrammed default
   980                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   981                           ;	LVP = 0x1, unprogrammed default
   982                           ;	Data EEPROM Memory Code Protection bit
   983                           ;	CPD = 0x1, unprogrammed default
   984                           ;	Flash Program Memory Write Enable bits
   985                           ;	WRT = 0x3, unprogrammed default
   986                           ;	In-Circuit Debugger Mode bit
   987                           ;	DEBUG = 0x1, unprogrammed default
   988                           ;	Flash Program Memory Code Protection bit
   989                           ;	CP = 0x1, unprogrammed default
   990     2007                     	org	8199
   991     2007  3FFB               	dw	16379

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    clcd_print@str	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[6]), STR_2(CODE[3]), STR_3(CODE[9]), 


Critical Paths under _main in COMMON

    _main->_clcd_print
    _main->_clcd_putch
    _init_clcd->_init_display_controller
    _init_display_controller->_clcd_write
    _clcd_putch->_clcd_write
    _clcd_print->_clcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     398
                         _clcd_print
                         _clcd_putch
                        _init_config
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0      91
                          _init_clcd
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0      91
            _init_display_controller
 ---------------------------------------------------------------------------------
 (3) _init_display_controller                              2     2      0      91
                                              4 COMMON     2     2      0
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_putch                                           2     1      1     143
                                              4 COMMON     2     1      1
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_print                                           2     0      2     164
                                              4 COMMON     2     0      2
                         _clcd_write
 ---------------------------------------------------------------------------------
 (4) _clcd_write                                           4     3      1      91
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clcd_print
     _clcd_write
   _clcd_putch
     _clcd_write
   _init_config
     _init_clcd
       _init_display_controller
         _clcd_write

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      6       6     42.9%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       6      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Feb 10 17:55:10 2025

                              pc 0002                   clcd_print@addr 0075                               l13 0798  
                             l22 0714                               l16 07FB                               l42 073F  
                             l19 0703                               l28 0739                               l37 06F6  
                             u40 0739                               u41 0738                               u35 077E  
                             u57 079D                               u67 07AC                               u77 07BA  
                             u87 07D0                               u97 07DC                               fsr 0004  
                            l701 06F7                              l711 0715                              l703 06FC  
                            l713 071D                              l705 06FD                              l721 073A  
                            l715 072B                              l707 06FE                              l723 0747  
                            l661 076E                              l717 072D                              l709 0705  
                            l725 0750                              l671 0787                              l663 0771  
                            l719 06F1                              l727 0759                              l673 078C  
                            l665 0772                              l681 07A8                              l675 078F  
                            l667 0777                              l659 0767                              l691 07CE  
                            l683 07B8                              l669 0786                              l693 07DA  
                            l685 07BD                              l677 0799                              l695 07DF  
                            l687 07C4                              l679 07A1                              l697 07EF  
                            l689 07C7                              l699 07F6                              u107 07EA  
                            u117 07F8                              u127 0774                              u137 0789  
                            u147 0793                   clcd_putch@addr 0074                              fsr0 0004  
                 clcd_putch@data 0075                             STR_1 0012                             STR_2 0018  
                           STR_3 0009                             _main 073A                             btemp 007E  
                           start 0000                   clcd_write@byte 0073                   clcd_write@mode 0070  
                          ?_main 0070                     ?_init_config 0070                            _PORTD 0008  
                          _TRISD 0088                            pclath 000A                            status 0003  
                          wtemp0 007E                  __initialization 07FC                     __end_of_main 0766  
                         ??_main 0076          _init_display_controller 0799          __end_of__initialization 07FC  
                 __pcstackCOMMON 0070        ??_init_display_controller 0074                       _clcd_print 0715  
                     _clcd_putch 0704                       _clcd_write 0766                       __pmaintext 073A  
                     __stringtab 0003                          __ptext1 06F1                          __ptext2 06F7  
                        __ptext3 0799                          __ptext4 0704                          __ptext5 0715  
                        __ptext6 0766  __end_of_init_display_controller 07FC                __end_of_init_clcd 0704  
           end_of_initialization 07FC                      ?_clcd_print 0074                      ?_clcd_putch 0074  
                    ?_clcd_write 0070                        _PORTEbits 0009                        _TRISEbits 0089  
                  clcd_print@str 0074              start_initialization 07FC                    ??_init_config 0076  
                      ___latbits 0002                        __pstrings 0003                        _init_clcd 06F7  
            __end_of_init_config 06F7         ?_init_display_controller 0070                     ??_clcd_print 0076  
                   ??_clcd_putch 0075                     ??_clcd_write 0071                      __stringbase 0008  
             __end_of_clcd_print 073A               __end_of_clcd_putch 0715               __end_of_clcd_write 0799  
                     ?_init_clcd 0070               __end_of__stringtab 0009                      _init_config 06F1  
                    ??_init_clcd 0076                        stringcode 0003                         stringdir 0003  
                       stringtab 0003  
